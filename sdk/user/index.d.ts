/**
 * An alias for the Authentication interface, providing access to authentication related functionality
 * @public
 */
export declare const auth: Authentication;

/**
 * An API for authenticating from apps.
 * @public
 */
export declare interface Authentication {
  /**
   * Requests for the user to authenticate with a 3P auth provider.
   *
   * @param request - authentication request
   * @returns Detailed information about the result of the attempted authentication.
   *
   * @remarks
   * This API method takes an optional param called "context" â€“ a custom,
   * developer-specified string of up to 32 characters.
   *
   * This parameter is designed for use when the app's backend needs
   * additional contextual information from its frontend to authenticate.
   * It is appended to the Redirect URL and transferred openly, so it
   * must not store sensitive information, user data, tokens, secrets,
   * or anything that is not required or directly related to making
   * authentication-related decisions.
   *
   * Possible use cases are
   * - The app authenticates with a third-party service with multiple
   * authentication endpoints or custom domains. E.g., it is a self-managed
   * web app like GitLab that organizations can host on custom domains.
   * - For authentication with a third party, the app needs to set different
   * OAuth 2.0 settings based on the user's choice or actions in the app.
   * E.g., the app may request access to a minimal set of API scopes
   * initially and re-run the authentication to upgrade the token for
   * accessing more API scopes later.
   */
  requestAuthentication: (
    request?: AuthenticationRequest
  ) => Promise<AuthenticationResponse>;
  /**
   * Returns a JWT for authentication with your backend
   *
   * @returns The token
   *
   * @remarks
   * When successful, this method returns a token generated by Canva, to be used by your application
   * to authenticate with your backend. Canva manages the secrets used to generate this
   * token as well as the lifetime and expiry.
   *
   * Always call this method whenever you need a token. The token is cached by Canva on the frontend,
   * so there is no need to cache the token in your application.
   *
   * The token should be added to the 'Authorization' header on your requests with the 'Bearer' prefix.
   *
   * When decoded, the token contains the following fields:
   *   "userId"  - Unique User ID
   *   "brandId" - Unique Brand ID
   *
   *  With the fields described above, your backend application will be able to uniquely identify
   *  your app, what user and the current brand of that user.
   */
  getCanvaUserToken: () => Promise<CanvaUserToken>;
}

/**
 * @public
 * Authentication aborted response
 *
 * @remarks
 * An authentication flow is considered aborted when a user closes
 * the authentication popup window.
 *
 * This is a subtype of the {@link AuthenticationResponse} type.
 */
export declare type AuthenticationAborted = {
  readonly status: "ABORTED";
};

/**
 * @public
 * Authentication completed response
 *
 * @remarks
 * This is a subtype of the {@link AuthenticationResponse} type.
 */
export declare type AuthenticationCompleted = {
  readonly status: "COMPLETED";
};

/**
 * @public
 * The response of an authentication flow when the user hasn't provided the app
 * with the required permissions to complete the authentication flow.
 *
 * @param details - An array of custom error codes, provided by the app. If
 * the app doesn't provide any error codes, the array is empty.
 *
 * @remarks
 * This response is returned if the app redirects the user back to Canva and:
 *
 * - Sets the `success` query string parameter to "false"
 * - Includes an `errors` query string parameter with a comma-separated list of errors
 *
 * This is a subtype of the {@link AuthenticationResponse} type.
 */
export declare type AuthenticationDenied = {
  readonly status: "DENIED";
  readonly details: readonly string[];
};

/**
 * @public
 * Authentication request options.
 *
 * @remarks
 * These options are accepted by the {@link Authentication.requestAuthentication} method.
 */
export declare type AuthenticationRequest = {
  /**
   * A value to append to the Redirect URL via a `context` query parameter, allowing
   * apps to pass arbitrary information to their backend.
   *
   * @remarks
   * Some examples of possible use-cases include:
   *
   * - The app authenticates with a third-party service that supports multiple authentication
   * endpoints or custom domains. For example, a self-managed app like GitLab that organizations
   * can host on their own domain.
   * - The app needs to set different authentication permissions based on the user's actions in
   * the app. For example, the app may request access to a minimal set of scopes but allow the user
   * to re-run the authentication flow to access additional scopes at a later time.
   *
   * This parameter must not contain sensitive information, such as user data or tokens,
   * or anything that is not required to implement authentication-related features.
   *
   * The length of the string must not exceed 32 characters.
   */
  context?: string;
};

/**
 * @public
 * The response of an authentication request
 *
 * @remarks
 * This type is returned by the {@link Authentication.requestAuthentication} method.
 */
export declare type AuthenticationResponse =
  | AuthenticationCompleted
  | AuthenticationAborted
  | AuthenticationDenied;

/**
 * @public
 * CanvaUserToken is the token that should be added to the headers on backend fetch requests
 *
 * @remarks
 * This is an alias of the string type.
 */
export declare type CanvaUserToken = string & {
  __canvaUserToken: never;
};

export {};
